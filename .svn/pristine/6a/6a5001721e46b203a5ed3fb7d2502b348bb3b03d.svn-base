<?php

namespace Redrain\Express;

class LaravelExpress
{

    protected $hostExpressName; //获取快递服务商
    protected $hostExpressNo;   //获取快递运单流转信息

    public function __construct()
    {
        $this->hostExpressName = 'http://www.kuaidi100.com/autonumber/autoComNum?text=';
        $this->hostExpressNo = 'http://www.kuaidi100.com/query?type=';  //zhongtong&postid=447974544163
    }

    /**
     * 获取快递商家
     * @param string $no
     * @return string
     */
    public function getExpressNameByNo($no)
    {
        if (!$no) return;
        $url = $this->hostExpressName . $no;
        $content = self::curlHttpGet($url);
        $content = json_decode($content, true);
        return $content['auto'][0]['comCode'];
    }

    /**
     * 获取快递信息
     * @param $no
     * @return string
     */
    public function getExpressInfoByNo($no,$needDetail = 0)
    {
        $expressName = $this->getExpressNameByNo($no);
        if ($needDetail){
            $url = $this->hostExpressNo . $expressName . '&postid='. $no;
            $content = self::curlHttpGet($url);
        }else{
            $content = json_encode(['message'=>$expressName ? 'ok' : 'fail','com'=>$expressName,'nu'=>$no]);
        }
        return $content;

    }

    /**
     * 快递100实时查询接口
     * @param $com
     * @param $nu
     * @return array
     */
    public function getExpress100Detail($com,$nu){
        $post_data = [];
        $post_data["customer"] = '4AA025F61878D8CB3D6DC1BD3E2ECE51';
        $key= 'CEOBleAa5976' ;
        $post_data["param"] = '{"com":"'.$com.'","num":"'.$nu.'"}';

        $url='http://poll.kuaidi100.com/poll/query.do';
        $post_data["sign"] = md5($post_data["param"].$key.$post_data["customer"]);
        $post_data["sign"] = strtoupper($post_data["sign"]);
        $o="";
        foreach ($post_data as $k=>$v)
        {
            $o.= "$k=".urlencode($v)."&";		//默认UTF-8编码格式
        }
        $post_data=substr($o,0,-1);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL,$url);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
        $result = curl_exec($ch);
        $data = str_replace("\"",'"',$result );
        $data = json_decode($data,true);
        return $data;
    }

    /**
     * curl GET 请求
     * @param $url
     * @param $timeOut
     * @param bool $ssl
     * @param array $header
     * @return mixed
     */
    public static function curlHttpGet($url, $timeOut = 5, $ssl = false, $header = [], $user_agent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0")
    {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url); //设置链接
        curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_TIMEOUT, $timeOut);
        curl_setopt($curl, CURLOPT_USERAGENT,$user_agent);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1 );
        if ($ssl) {
            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        }
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);

        if ($err) {
            app('log')->info('HttpUtil_curlHttpGet', ['url' => $url, 'error' => $err]);
        } else {
            app('log')->info('HttpUtil_curlHttpGet', ['url' => $url, 'response' => $response]);
            return $response;
        }

    }
}