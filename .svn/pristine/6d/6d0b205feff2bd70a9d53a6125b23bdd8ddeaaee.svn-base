<?php

namespace App\Http\Controllers\Admin;

use App\Charge;
use App\Consume;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Yuansfer\Exception\YuansferException;
use Yuansfer\Yuansfer;

class CenterController extends Controller
{
    public function index($type){
        $user = Auth::user();
        return view('admin.center.'.($type == 1 ? 'index' : 'consume'),['user'=>$user,'type'=>$type]);
    }

    public function getData($type,Request $request){
        $userid = Auth::id();
        $page = intval($request->post('page',10));
        $limit = intval($request->post('limit',10));
        $data = $type == 1 ? Charge::where('uid',$userid) : Consume::where('uid',$userid);
        $acceptParams = ['system_order_no','user_order_no','charge_order_no','type','start','end'];
        foreach ($acceptParams as $val){
            if (!empty($request->get($val))){
                if ($val == 'start'){
                    $data = $data->where('created_at','>=',$request->get($val));
                }elseif ($val == 'end'){
                    $data = $data->where('created_at','<=',$request->get($val));
                }else{
                    $data = $data->where($val,$request->get($val));
                }
            }
        }
        $count = $data->count();
        $outputData = $data->offset(($page-1)*$limit)->limit($limit)->orderBy('created_at','DESC')->get();
        return response()->json(['status'=>200,'msg'=>'Success','data'=>$outputData,'count'=>$count]);
    }

    public function payCallback(Request $request){
        Log::notice($request);
    }

    public function payNotify(Request $request){
        Log::notice($request);
    }

    public function securepay(Request $request){
        $allowCurrency = ['USD','CAD','CNY'];
        $allowVendor = ['alipay','wechatpay','unionpay'];
        $amount = $request->post('amount') ? number_format($request->post('amount'),'2','.','') : '0.01';
        $currency = in_array($request->post('currency'),$allowCurrency) ? $request->post('currency') : 'USD';
        $vendor = in_array($request->post('vendor'),$allowVendor) ? $request->post('vendor') : 'alipay';
        $micro = intval(microtime(true)*1000);
        $refernce = 'CH'.date('YmdH',time()).$micro.rand(100000,999999);
        $terminal = $this->__isMobile() ? 'WAP' : 'ONLINE';

        $config = $this->__YuansferConfig();
        $yuansfer = new Yuansfer($config);

        if (env('APP_DEBUG')) $yuansfer->setTestMode();

        $api = $yuansfer->createSecurePay();

        $api
            ->setAmount($amount) //The amount of the transaction.
            ->setCurrency($currency) // The currency, USD, CAD supported yet.
            ->setVendor($vendor) // The payment channel, alipay, wechatpay, unionpay, enterprisepay are supported yet.
            ->setTerminal($terminal) // ONLINE, WAP
            ->setReference($refernce) //The unque ID of client’s system.
            ->setIpnUrl('https://domain/example/callback_secure_pay_ipn.php') //route('payNotify') // The asynchronous callback method. https only
            ->setCallbackUrl(route('payCallback') . // The Synchronous callback method.
                '?yuansferId={yuansferId}&status={status}&amount={amount}&time={time}&reference={reference}&note={note}&description={description}'); // query name can change, like: id={yuansferId}&num={amount}

        //optional parameters
        $api->setDescription('description info') // it will be displayed on the card charge
        ->setNote(md5($refernce.$amount))
            ->setTimeout(120);  // units are minutes, default is 120


        try {
            // send to api get response
            // SecurePay api return html
            $data = $api->send();

            $request->session()->flash('payHtml',$data);

            $create = [
                'uid'=>Auth::id(),
                'charge_order_no'=>$refernce,
                'type'=>$vendor,
                'money'=>$amount,
                'currency'=>$currency,
                'terminal'=>$terminal,
            ];
            Charge::create($create);

        } catch (YuansferException $e) {
            // required param is empty
            if ($e instanceof \Yuansfer\Exception\RequiredEmptyException) {
                $message = 'The param: ' . $e->getParam() . ' is empty, in API: ' . $e->getApi();
                return response()->json(['status'=>-100,'msg'=>$message]);
            }

            // http connect error
            if ($e instanceof \Yuansfer\Exception\HttpClientException) {
                $message = $e->getMessage();
                return response()->json(['status'=>-102,'msg'=>$message]);
            }

            // http response status code < 200 or >= 300, 301 and 302 will auto redirect
            if ($e instanceof \Yuansfer\Exception\HttpErrorException) {
                /** @var \Httpful\Response http response */
                $response = $e->getResponse();
                return response()->json(['status'=>-103,'response'=>$response]);
            }
        }

        return response()->json(['status'=>200,'msg'=>'Success']);
    }

    public function showPay(Request $request){
        $payHtml = $request->session()->get('payHtml');
        if (!isset($payHtml) || empty($payHtml)) abort(404,'页面不存在');
        echo $payHtml;
    }

    private function __isMobile() {
        // 如果有HTTP_X_WAP_PROFILE则一定是移动设备
        if (isset($_SERVER['HTTP_X_WAP_PROFILE'])) {
            return true;
        }
        // 如果via信息含有wap则一定是移动设备,部分服务商会屏蔽该信息
        if (isset($_SERVER['HTTP_VIA'])) {
            // 找不到为flase,否则为true
            return stristr($_SERVER['HTTP_VIA'], "wap") ? true : false;
        }
        // 脑残法，判断手机发送的客户端标志,兼容性有待提高。其中'MicroMessenger'是电脑微信
        if (isset($_SERVER['HTTP_USER_AGENT'])) {
            $clientkeywords = array('nokia','sony','ericsson','mot','samsung','htc','sgh','lg','sharp','sie-','philips','panasonic','alcatel','lenovo','iphone','ipod','blackberry','meizu','android','netfront','symbian','ucweb','windowsce','palm','operamini','operamobi','openwave','nexusone','cldc','midp','wap','mobile','MicroMessenger');
            // 从HTTP_USER_AGENT中查找手机浏览器的关键字
            if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))) {
                return true;
            }
        }
        // 协议法，因为有可能不准确，放到最后判断
        if (isset ($_SERVER['HTTP_ACCEPT'])) {
            // 如果只支持wml并且不支持html那一定是移动设备
            // 如果支持wml和html但是wml在html之前则是移动设备
            if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html')))) {
                return true;
            }
        }
        return false;
    }

    private function __YuansferConfig(){
        return [
            Yuansfer::MERCHANT_NO => env('YUAN_MERCHANTNO'),
            Yuansfer::STORE_NO => env('YUAN_STORENO'),
            Yuansfer::API_TOKEN => env('YUAN_TOKEN'),
            Yuansfer::TEST_API_TOKEN => env('YUAN_TOKEN_TEST'),
        ];
    }

}
