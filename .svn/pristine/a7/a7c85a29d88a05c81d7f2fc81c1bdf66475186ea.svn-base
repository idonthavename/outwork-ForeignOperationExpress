<?php

namespace App\Http\Controllers\Master;

use App\Addon;
use App\Consume;
use App\Order;
use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

class ListController extends Controller
{
    private  $allstatus;

    public function __construct(){
        $this->allstatus = [
            '未审核',
            '已审核待入库',
            '已拣货待打包',
            '已入库代付款',
            '已付款待出库',
            '已出库',
            '已发往起运机场',
            '飞往中国',
            '抵达海关，等候清关',
            '海关清关中',
            '已出关转国内派送',
            '已签收',
            99=>'异常件'
        ];
    }

    public function index($status){
        $output['status'] = $status;
        $output['allstatus'] = $this->allstatus;
        return view('master.list.index',$output);
    }

    public function getData($status,Request $request){
        $page = intval($request->post('page',10));
        $limit = intval($request->post('limit',10));

        $data = Order::whereRaw('1 = 1');
        if ($status > 0) $data = $data->where('status',$status-1);
        $acceptParams = ['system_order_no','s_name','r_name','r_phone','user_order_no','line_id','r_cre_num_status','id_card_thumb_status','start','end','status'];
        foreach ($acceptParams as $val){
            if (!empty($request->get($val))){
                if ($val == 'start'){
                    $data = $data->where('created_at','>=',$request->get($val));
                }elseif ($val == 'end'){
                    $data = $data->where('created_at','<=',$request->get($val));
                }elseif ($val == 'r_cre_num_status'){
                    $data = $request->get($val) == 1 ? $data->whereNotNull('r_cre_num') : $data->whereNull('r_cre_num');
                }elseif ($val == 'id_card_thumb_status'){
                    $data = $request->get($val) == 1 ? $data->whereNotNull('id_card_front')->whereNotNull('id_card_back') : $data->whereNull('id_card_front')->whereNull('id_card_back');
                }else{
                    $data = $data->where($val,$request->get($val));
                }
            }
        }
        $count = $data->count();
        $outputData = $data->offset(($page-1)*$limit)->limit($limit)->orderBy('created_at','DESC')->get();
        foreach ($outputData as $key=>$val){
            $val['number'] = $key+1;
            $val['statustr'] = $this->allstatus[$val['status']];
            $outputData[$key] = $val;
        }
        return response()->json(['status'=>200,'msg'=>'Success','data'=>$outputData,'count'=>$count]);
    }

    public function audit(Request $request){
        return $this->__checkStatusChange($request->post(),1);
    }
    public function pick(Request $request){
        return $this->__checkStatusChange($request->post(),2);
    }
    public function showWeight(){ return view('master.list.weight'); }
    public function weight(Request $request){
        $post = $request->post();
        $info = Order::where('system_order_no',$post['system_order_no'])->first();
        if (!isset($info) || empty($info)) return response()->json(['status'=>-100,'msg'=>'订单不存在']);
        $post['statusJson'][] = '{"id":'.$info->id.',"status":'.$info->status.'}';
        return $this->__checkStatusChange($post,3);
    }
    public function charge(Request $request){
        return $this->__countCharge($request->post(),4);
    }
    public function getout(Request $request){
        return $this->__checkStatusChange($request->post(),5);
    }
    public function showChange(){ return view('master.list.change',['allstatus'=>$this->allstatus]); }
    public function change(Request $request){
        $post = $request->post();
        $post['statusJson'] = json_decode($post['statusJson'],true);
        return $this->__checkStatusChange($post, intval($request->post('status')));
    }

    private function __checkStatusChange($request,$changeStatus){
        $validator = Validator::make($request,['statusJson' => 'required|array','weight' => 'nullable|numeric', 'tax' => 'nullable|numeric', 'fail_reason' => 'nullable|string|max:255', 'express_no'=>'nullable|string|max:50']);
        if ($validator->fails()) return json_encode(['status'=>-100,'msg'=>'保存失败']);
        foreach ($request['statusJson'] as $val){
            if (!is_array($val)) $val = json_decode($val,true);
            if ($changeStatus < $val['status'] && $val['status'] <> 99) return json_encode(['status'=>-101,'msg'=>'抱歉，订单不允许回退操作']);
            if (isset($request['weight']) && $request['weight'] > 0) $update['weight'] = number_format($request['weight'],2,'.','');
            if (isset($request['tax']) && $request['tax'] > 0) $update['tax'] = number_format($request['tax'],2,'.','');
            if (isset($request['fail_reason'])) $update['fail_reason'] = $request['fail_reason'];
            if (isset($request['express_no'])) $update['express_no'] = $request['express_no'];
            $update['before_status'] = $val['status'];
            $update['status'] = $changeStatus;
            Order::where('id',$val['id'])->update($update);
        }
        return json_encode(['status'=>200,'msg'=>'保存成功']);
    }

    private function __countCharge($request,$changeStatus){
        $validator = Validator::make($request,['statusJson' => 'required|array']);
        if ($validator->fails()) return json_encode(['status'=>-100,'msg'=>'保存失败']);
        foreach ($request['statusJson'] as $val){
            $val = json_decode($val,true);
            if ($changeStatus < $val['status']) return json_encode(['status'=>-101,'msg'=>'抱歉，订单不允许回退操作']);

            $sum = 0;
            $info = Order::find($val['id']);
            $lineData = $info->lineData;
            $userData = $info->userData;
            $price = json_decode($lineData->price,true);
            $addons = Addon::whereIn('name',explode(',',$info->addons))->get();
            $overweight = json_decode($lineData->overweight,true)[$userData->rank];
            //初始价格（根据会员等级）
            $sum += $price[$userData->rank];
            //附加费用
            foreach ($addons as $addonval){
                $sum += $addonval['money'];
            }
            //超重后的额外费用（根据会员等级）
            if ($info->weight > $lineData->ykg){
                $yushu = $info->weight - $lineData->ykg;
                if (isset($overweight['needint']) && $overweight['needint'] == 'on'){
                    $sum += ceil($yushu) * $overweight['price'];
                }else{
                    $sum += $yushu * $overweight['price'];
                }
            }
            $sum = number_format($sum,2,'.','');
            //检查用余额
            if ($userData->money < $sum){
                return json_encode(['status'=>-101,'msg'=>'用户余额不足']);
            }else{
                $consume = [
                    'uid'=>$userData->id,
                    'name'=>$userData->name,
                    'consume_order_no'=> 'C'.date('YmdHis').mt_rand(100000,999999),
                    'system_order_no'=>$info->system_order_no,
                    'user_order_no'=>$info->user_order_no,
                    'money'=>$sum,
                ];
                Consume::create($consume);
                $leftMoney = number_format(($userData->money - $sum),2,'.','');
                User::where('id',$info->uid)->update(['money'=>$leftMoney]);
            }

            $update['money'] = $sum;
            $update['before_status'] = $val['status'];
            $update['status'] = $changeStatus;
            Order::where('id',$val['id'])->update($update);
        }
        return json_encode(['status'=>200,'msg'=>'操作成功']);
    }
}
